AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample Aurora Serverless Template

Parameters:
  NamePrefix:
    Type: String
    Default: aws-aurora-sl-sample
  VpcCidr:
    Type: String
    Default: '10.1.0.0/16'
  PrivateSubnetACidr:
    Type: String
    Default: '10.1.10.0/24'
  PrivateSubnetCCidr:
    Type: String
    Default: '10.1.20.0/24'
  DBMasterUserName:
    Type: String
    Default: admin
  DatabaseName:
    Type: String
    Default: todo

Globals:
  Function:
    Timeout: 3

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-vpc'

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Ref PrivateSubnetACidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-private-subnet-a'

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: !Ref PrivateSubnetCCidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-private-subnet-c'

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-private-route-a'

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-private-route-c'

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${NamePrefix}-database-secrets'
      Description: Database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBMasterUserName}"}'
        GenerateStringKey: 'password'
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Database subnet group
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC

  DatabaseClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Database cluster parameter group
      Family: aurora5.6
      Parameters:
        character_set_client: utf8mb4
        character_set_connection: utf8mb4
        character_set_database: utf8mb4
        character_set_results: utf8mb4
        character_set_server: utf8mb4
        time_zone: Asia/Tokyo

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${NamePrefix}-database-cluster'
      DBClusterParameterGroupName: !Ref DatabaseClusterParameterGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      MasterUsername:
        !Join [
          '',
          [
            '{{resolve:secretsmanager:',
            !Ref DatabaseSecret,
            ':SecretString:username}}',
          ],
        ]
      MasterUserPassword:
        !Join [
          '',
          [
            '{{resolve:secretsmanager:',
            !Ref DatabaseSecret,
            ':SecretString:password}}',
          ],
        ]
      DatabaseName: !Ref DatabaseName
      Engine: aurora
      EngineMode: serverless
      EngineVersion: 5.6.10a
      BackupRetentionPeriod: 30
      DeletionProtection: 'true'
      ScalingConfiguration:
        AutoPause: 'true'
        MaxCapacity: 1
        MinCapacity: 1
        SecondsUntilAutoPause: 300
      # 以下3点、コメントアウトを外すとstak errorになる
      # Port: 3306
      # PreferredBackupWindow: 18:25-18:55
      # PreferredMaintenanceWindow: Tue:19:05-Tue:19:35 # UTC

  TodoGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: get.lambda_handler
      Runtime: python3.7
      Policies:
        - CloudFormationDescribeStacksPolicy: {}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DatabaseSecret
        - AmazonRDSDataFullAccess
      Events:
        get:
          Type: Api
          Properties:
            Path: /todo/{id}
            Method: get

  TodoPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: post.lambda_handler
      Runtime: python3.7
      Policies:
        - CloudFormationDescribeStacksPolicy: {}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DatabaseSecret
        - AmazonRDSDataFullAccess
      Events:
        post:
          Type: Api
          Properties:
            Path: /todo
            Method: post

  TodoPatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: patch.lambda_handler
      Runtime: python3.7
      Policies:
        - CloudFormationDescribeStacksPolicy: {}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DatabaseSecret
        - AmazonRDSDataFullAccess
      Events:
        patch:
          Type: Api
          Properties:
            Path: /todo/{id}
            Method: patch

  TodoDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: delete.lambda_handler
      Runtime: python3.7
      Policies:
        - CloudFormationDescribeStacksPolicy: {}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DatabaseSecret
        - AmazonRDSDataFullAccess
      Events:
        delete:
          Type: Api
          Properties:
            Path: /todo/{id}
            Method: delete

Outputs:
  DatabaseClusterArn:
    Value: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DatabaseCluster}'
  DatabaseName:
    Value: !Ref DatabaseName
  DatabaseSecretArn:
    Value: !Ref DatabaseSecret
  TodoApi:
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
